{
page{

            polygon(points:[(0,0),(0,100),(100,100),(100,0)],background-color:white)
            image("C:\Users\ibtih\OneDrive\Bureau\\hashmap.jpg", origin:center, position:(83,50),size:(100,100),preserve-aspect-ratio)
            polygon(points:[(0,0),(50,0),(70,100),(0,100)],background-color:"#00215E")
            polygon(points:[(50,5),(53,5),(70,95),(67,95)],stroke:5,color:gray)
            polygon(points:[(50,0),(53,0),(70,90),(67,90)],background-color:"#FC4100")
            @(H1)text("
                    Notions Théoriques:
                    "
                    at:(6,10)
            )
            text(
                    "
                    La table de hachage est une structure de données
                    qui permet une recherche rapide en utilisant une fonction
                    de hachage pour mapper des clés à des emplacements
                    dans une table.
                    Cette approche offre généralement un temps daccès constant O(1),
                    ce qui la rend très efficace pour des opérations de
                    recherche, d'insertion et de suppression.
                    "
                    ,font-size:10%g,at:(6,40),color:white
            )
            text(
                    "
                    Cependant, elle est coûteuse en termes de mémoire,
                    car elle nécessite souvent plus d'espace que les autres
                    structures de données pour minimiser les collisions
                    et garantir des performances optimales.
                    "
                    ,font-size:10%g,at:(6,80),color:white
            )
}
page{
            polygon(points:[(0,5),(12,5),(0,35),(0,35)],background-color:"#FC4100")
            polygon(points:[(0,0),(10,0),(0,25),(0,20)],background-color:"#00215E")

            polygon(points:[(0,95),(12,95),(0,65),(0,65)],background-color:"#FC4100")
            polygon(points:[(0,100),(10,100),(0,75),(0,80)],background-color:"#00215E")

            polygon(points:[(60,53),(70,13),(100,13),(100,93),(70,93)],background-color:"#FC4100")
            polygon(points:[(60,50),(70,10),(100,10),(100,90),(70,90)],background-color:"#00215E")
            //polygon(points:[(60,50),(75,10),(100,10),(100,90),(75,90)],background-color:"#00215E")

            text(
                                "
                                Un arbre AVL est une structure de données auto-équilibrée,
                                un type spécifique d'arbre binaire de recherche (BST),
                                où l'équilibre est maintenu par des rotations
                                après chaque opération d'insertion ou de suppression
                                pour garantir un temps de recherche logarithmique O(logn).
                                L'arbre AVL assure que la différence de hauteur entre
                                les sous-arbres gauche et droit d'un nœud < ou = 1,
                                optimisant ainsi les performances de recherche et d'insertion/suppression.
                                "
                                ,font-size:8%g,position:(8,20)
            )
            text(
                                "
                                Cependant, un inconvénient des arbres AVL est le surcoût
                                en termes de rotations et de rééquilibrage après chaque
                                insertion ou suppression, ce qui peut rendre ces opérations
                                relativement coûteuses en comparaison avec d'autres arbres
                                binaires de recherche non équilibrés.
                                "
                                ,font-size:8%g,position:(8,65)
            )
            polygon(points:[(78,17),(90,48),(90,48),(78,17)])
            circle(bg:"#FC4100",size:(5,10),at:(80,15),stroke:10)
            text("10",at:(79,17),font-size:10%g)
            circle(bg:"#FC4100",size:(5,10),at:(85,30))
            text("20",at:(84,31),font-size:10%g)
            circle(bg:"#FC4100",size:(5,10),at:(90,45))
            text("30",at:(89,45),font-size:10%g)

            polygon(points:[(78,40),(79,40),(79,45),(78,45)],bg:"#2C4E80")
            polygon(points:[(77,45),(80,45),(78.5,49)],background-color:"#2C4E80")

            polygon(points:[(80,65),(85,75),(85,75),(80,65)])
            polygon(points:[(77,65),(72,75),(72,75),(77,65)])
            circle(bg:"#FC4100",size:(5,10),at:(80,65))
            text("20",at:(79,64),font-size:10%g)
            circle(bg:"#FC4100",size:(5,10),at:(85,78))
            text("30",at:(84,76),font-size:10%g)
            circle(bg:"#FC4100",size:(5,10),at:(75,78))
            text("10",at:(74,76),font-size:10%g)
}
}